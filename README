
██╗░░░░░██╗░██████╗██████╗░
██║░░░░░██║██╔════╝██╔══██╗
██║░░░░░██║╚█████╗░██████╔╝
██║░░░░░██║░╚═══██╗██╔═══╝░
███████╗██║██████╔╝██║░░░░░
╚══════╝╚═╝╚═════╝░╚═╝░░░░░

██╗███╗░░██╗████████╗███████╗██████╗░██████╗░██████╗░███████╗████████╗███████╗██████╗░
██║████╗░██║╚══██╔══╝██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝╚══██╔══╝██╔════╝██╔══██╗
██║██╔██╗██║░░░██║░░░█████╗░░██████╔╝██████╔╝██████╔╝█████╗░░░░░██║░░░█████╗░░██████╔╝
██║██║╚████║░░░██║░░░██╔══╝░░██╔══██╗██╔═══╝░██╔══██╗██╔══╝░░░░░██║░░░██╔══╝░░██╔══██╗
██║██║░╚███║░░░██║░░░███████╗██║░░██║██║░░░░░██║░░██║███████╗░░░██║░░░███████╗██║░░██║
╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░╚═╝╚══════╝░░░╚═╝░░░╚══════╝╚═╝░░╚═╝

By Caroline Lewis, Todd Buck, and Mithul Nallaka

-----------|
OBJECTIVE: |
-----------|

Implement Lisp in C++ with the following commands/built-in names:

            arithmetic: +, -, *, /
          verification: list?, number?, nil?, symbol?
                 logic: and?, or?, =, <, >, if, cond
                 lists: cons, car, cdr
   variables/functions: set, define
extended functionality: list, eval

Note: The list command creates a flat list. Ex: (list 1 2 3 4 5 6 7) will return (1 2 3 4 5 6 7). This allowed us to create lists quickly in testing to avoid typing time-consuming nested cons statements.

Note: The eval function is implemented within main.cpp on line 19. It takes in a list of nested expressions and an environment as parameters and returns the fully evaluated result.

-------------|
HOW TO RUN:  |
-------------|

Open a terminal, type in any of the following, and press enter.

make cpp     -->      builds cpplisp.

make test    -->      builds cpplisp and runs testing suite. all 111 tests will pass.
                      the tests can be found in impls/tests/tests_master.txt and the
                      results of the tests can be found in impls/tests/tests_log.txt.

make repl    -->      builds cpplisp and runs in repl environment. you may type in
                      parenthesis-bound expressions, press enter, and the result 
                      will be returned back. For example, user> (+ 1 2) will print 3.

make clean   -->      removes main executable from project directory. do this after
                      running the repl and testing suite.

------------------|
HOW WE BUILT IT:  |
------------------|

We based the structure of our interpreter off of a pre-existing repository (Joel Martin's MAL Project) that contained a c++ implementation of a Lisp interpreter. We then built the base structure of this interpreter by following a YouTube tutorial (Tim Morgan's Online C++ Guide). We chose this as our base because it already had the testing suite and repl environment set up, two features that proved to be extremely useful as we heavily added and changed code functionality. If you'd like to view our creative process, you may view our GitHub repository below.

    Joel Martin's MAL Project: https://github.com/kanaka/mal/tree/master/impls/cpp
Tim Morgan's Online C++ Guide: https://tinyurl.com/2p8svp87
                  Our Project: https://github.com/todd-buck/cpplisp
